# File: extended_schedule/views/schedule_calendar_views.xml (continued)
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Action for Schedule Calendar -->
    <record id="action_schedule_calendar" model="ir.actions.act_window">
        <field name="name">Schedule Calendar</field>
        <field name="res_model">schedule.calendar.event</field>
        <field name="view_mode">calendar,list</field>
        <field name="context">{'search_default_this_week': 1}</field>
        <field name="search_view_id" ref="view_schedule_calendar_event_search"/>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                All employee schedules, time off, and extra days will appear here
            </p>
        </field>
    </record>
</odoo>

# File: extended_schedule/views/hr_employee_views.xml
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Add extended schedule tabs to Employee form -->
    <record id="hr_employee_view_form_inherit_extended_schedule" model="ir.ui.view">
        <field name="name">hr.employee.view.form.inherit.extended.schedule</field>
        <field name="model">hr.employee</field>
        <field name="inherit_id" ref="hr.view_employee_form"/>
        <field name="arch" type="xml">
            <notebook position="inside">
                <page string="Custom Time Off" groups="extended_schedule.group_extended_schedule_user">
                    <button name="create_custom_time_off" string="Request Time Off" type="object" class="oe_highlight"/>
                    <field name="custom_time_off_ids" context="{'default_employee_id': id}">
                        <list>
                            <field name="name"/>
                            <field name="date_from"/>
                            <field name="date_to"/>
                            <field name="number_of_days"/>
                            <field name="state"/>
                        </list>
                    </field>
                </page>
                <page string="Extra Days" groups="extended_schedule.group_extended_schedule_user">
                    <group>
                        <group>
                            <button name="create_saturday_signup" string="Saturday Signup" type="object" class="btn-primary"/>
                        </group>
                        <group>
                            <button name="create_extra_day" string="Extra Day Request" type="object" class="btn-primary"/>
                        </group>
                    </group>
                    <field name="extra_day_ids" context="{'default_employee_id': id}">
                        <list>
                            <field name="date"/>
                            <field name="is_saturday"/>
                            <field name="start_time" widget="float_time"/>
                            <field name="end_time" widget="float_time"/>
                            <field name="hours" widget="float_time"/>
                            <field name="state"/>
                        </list>
                    </field>
                </page>
            </notebook>
        </field>
    </record>
</odoo>

# File: extended_schedule/__init__.py
from . import models

# File: extended_schedule/models/calendar_sync.py
from odoo import api, fields, models, _
from datetime import datetime, timedelta
import pytz

class CalendarSync(models.AbstractModel):
    _name = 'extended.schedule.calendar.sync'
    _description = 'Calendar Synchronization'
    
    @api.model
    def _sync_regular_schedules(self):
        """Sync regular employee schedules to calendar events"""
        # Get all active schedules
        schedules = self.env['employee.custom.schedule'].search([])
        
        # Get the date range for the next 4 weeks
        today = fields.Date.today()
        end_date = today + timedelta(days=28)  # 4 weeks ahead
        
        calendar_events = self.env['schedule.calendar.event']
        
        # Delete old regular schedule events
        old_events = calendar_events.search([
            ('event_type', '=', 'regular'),
            ('start_datetime', '>=', fields.Datetime.now()),
        ])
        old_events.unlink()
        
        # For each schedule, create events for the next 4 weeks
        for schedule in schedules:
            employee = schedule.employee_id
            current_date = today
            
            # Loop through each day for the next 4 weeks
            while current_date <= end_date:
                weekday = current_date.weekday()  # 0 is Monday, 6 is Sunday
                
                # Skip Sunday
                if weekday == 6:
                    current_date += timedelta(days=1)
                    continue
                
                # Determine if employee works on this day
                works_today = False
                start_time = 0
                end_time = 0
                
                if weekday == 0 and schedule.monday_active:  # Monday
                    works_today = True
                    start_time = schedule.monday_start
                    end_time = schedule.monday_end
                elif weekday == 1 and schedule.tuesday_active:  # Tuesday
                    works_today = True
                    start_time = schedule.tuesday_start
                    end_time = schedule.tuesday_end
                elif weekday == 2 and schedule.wednesday_active:  # Wednesday
                    works_today = True
                    start_time = schedule.wednesday_start
                    end_time = schedule.wednesday_end
                elif weekday == 3 and schedule.thursday_active:  # Thursday
                    works_today = True
                    start_time = schedule.thursday_start
                    end_time = schedule.thursday_end
                elif weekday == 4 and schedule.friday_active:  # Friday
                    works_today = True
                    start_time = schedule.friday_start
                    end_time = schedule.friday_end
                elif weekday == 5 and schedule.saturday_active:  # Saturday
                    works_today = True
                    start_time = schedule.saturday_start
                    end_time = schedule.saturday_end
                
                if works_today:
                    # Convert float time to hours and minutes
                    start_hour = int(start_time)
                    start_minute = int((start_time - start_hour) * 60)
                    
                    end_hour = int(end_time)
                    end_minute = int((end_time - end_hour) * 60)
                    
                    # Create datetime objects
                    start_dt = datetime.combine(
                        current_date, 
                        datetime.min.time().replace(hour=start_hour, minute=start_minute)
                    )
                    end_dt = datetime.combine(
                        current_date, 
                        datetime.min.time().replace(hour=end_hour, minute=end_minute)
                    )
                    
                    # Create calendar event
                    calendar_events.create({
                        'name': f"{employee.name} - Regular Schedule",
                        'employee_id': employee.id,
                        'start_datetime': start_dt,
                        'end_datetime': end_dt,
                        'event_type': 'regular',
                        'source_id': f'employee.custom.schedule,{schedule.id}'
                    })
                
                current_date += timedelta(days=1)
    
    @api.model
    def _sync_time_off(self):
        """Sync time off records to calendar events"""
        # Get all approved time off that ends in the future
        time_offs = self.env['custom.time.off'].search([
            ('state', '=', 'validate'),
            ('date_to', '>=', fields.Date.today())
        ])
        
        calendar_events = self.env['schedule.calendar.event']
        
        # Delete old time off events
        old_events = calendar_events.search([
            ('event_type', '=', 'time_off'),
            ('start_datetime', '>=', fields.Datetime.now()),
        ])
        old_events.unlink()
        
        # For each time off, create a calendar event
        for time_off in time_offs:
            # Create all-day events
            start_dt = datetime.combine(time_off.date_from, datetime.min.time())
            end_dt = datetime.combine(time_off.date_to, datetime.max.time())
            
            calendar_events.create({
                'name': f"{time_off.employee_id.name} - Time Off: {time_off.name}",
                'employee_id': time_off.employee_id.id,
                'start_datetime': start_dt,
                'end_datetime': end_dt,
                'event_type': 'time_off',
                'source_id': f'custom.time.off,{time_off.id}'
            })
    
    @api.model
    def _sync_extra_days(self):
        """Sync extra days and Saturday signups to calendar events"""
        # Get all confirmed extra days in the future
        extra_days = self.env['extra.day'].search([
            ('state', '=', 'confirm'),
            ('date', '>=', fields.Date.today())
        ])
        
        calendar_events = self.env['schedule.calendar.event']
        
        # Delete old extra day events
        old_events = calendar_events.search([
            ('event_type', 'in', ['saturday', 'extra_day']),
            ('start_datetime', '>=', fields.Datetime.now()),
        ])
        old_events.unlink()
        
        # For each extra day, create a calendar event
        for extra_day in extra_days:
            # Convert float time to hours and minutes
            start_hour = int(extra_day.start_time)
            start_minute = int((extra_day.start_time - start_hour) * 60)
            
            end_hour = int(extra_day.end_time)
            end_minute = int((extra_day.end_time - end_hour) * 60)
            
            # Create datetime objects
            start_dt = datetime.combine(
                extra_day.date, 
                datetime.min.time().replace(hour=start_hour, minute=start_minute)
            )
            end_dt = datetime.combine(
                extra_day.date, 
                datetime.min.time().replace(hour=end_hour, minute=end_minute)
            )
            
            event_type = 'saturday' if extra_day.is_saturday else 'extra_day'
            day_type = 'Saturday' if extra_day.is_saturday else 'Extra Day'
            
            calendar_events.create({
                'name': f"{extra_day.employee_id.name} - {day_type}",
                'employee_id': extra_day.employee_id.id,
                'start_datetime': start_dt,
                'end_datetime': end_dt,
                'event_type': event_type,
                'source_id': f'extra.day,{extra_day.id}'
            })
    
    @api.model
    def sync_all_calendars(self):
        """Sync all schedules, time off, and extra days to the calendar"""
        self._sync_regular_schedules()
        self._sync_time_off()
        self._sync_extra_days()
        return True

# Update the models/__init__.py to include the new model
# File: extended_schedule/models/__init__.py (update)
from . import custom_time_off
from . import extra_day
from . import schedule_calendar_event
from . import hr_employee
from . import calendar_sync